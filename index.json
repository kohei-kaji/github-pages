
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Hi! I’m Kohei Kajikawa, a master’s student at the University of Tokyo (Oseki lab).\nMy research interests include computational linguistics (計算言語学) and computational psycholinguistics (計算心理言語学).\n研究に関して簡単に 文を見たり聞いたりするとすぐにその意味がわかりますが、その際に、無意識下でどのような形の文法がどのようなアルゴリズムで使われているのかに興味があります。\nまた、その文法が、なぜいまある形になっているのかについても興味があります。\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Hi! I’m Kohei Kajikawa, a master’s student at the University of Tokyo (Oseki lab).\nMy research interests include computational linguistics (計算言語学) and computational psycholinguistics (計算心理言語学).\n研究に関して簡単に 文を見たり聞いたりするとすぐにその意味がわかりますが、その際に、無意識下でどのような形の文法がどのようなアルゴリズムで使われているのかに興味があります。\nまた、その文法が、なぜいまある形になっているのかについても興味があります。","tags":null,"title":"Kohei Kajikawa","type":"authors"},{"authors":["Kohei Kajikawa","Ryo Yoshida","Yohei Oseki"],"categories":null,"content":"","date":1717200000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1717200000,"objectID":"c9a1a1f299c5c191cfaf01461803c938","permalink":"https://kohei-kaji.github.io/github-pages/publication/kajikawa-etal-2024-cogsci/","publishdate":"2024-04-06T06:07:27.373591Z","relpermalink":"/github-pages/publication/kajikawa-etal-2024-cogsci/","section":"publication","summary":"","tags":[],"title":"Dissociating Syntactic Operations via Composition Count","type":"publication"},{"authors":null,"categories":null,"content":"近年、計算言語学・NLPの方で、言語モデルの評価の文脈や、自然言語の統計的普遍性に関する研究の文脈で、自然言語の文法の生成力に関する議論が再注目されているように思われます。 生成力に関しては、理論言語学の知見が今に至るまで少しずつ着実に積み重ねられているものの、情報源が少なすぎるので、これまでの議論と関連研究をまとめて置いておきます。\n自然言語は弱文脈依存言語なのか？ 用語や歴史の説明は抜きにして、一旦結論から言うと、自然言語の文法が弱文脈依存文法（Mildly Context-Sensitive Grammar; MCSG）であるということは明確に示されているわけではありません。 ただ、少なくとも以下の2つの事実から、「自然言語の文法は弱文脈依存文法である」という言説には一定の支持が得られています。そのため、しばしば弱文脈依存仮説（MCS Hypothesis）などとも呼ばれています。\n1. 文脈自由文法では表現できない構文が自然言語に存在する。 Shieber (1985) により、Swiss-German（ドイツ語のスイス方言）の従属節中には、統語的にcross-serial dependencies（連続交差依存）が成り立ち、これにより自然言語には文脈自由文法では作れない表現が存在することが示されました。\ncross-serial dependenciesとは、以下のような（ここでは連続する動詞と対応する主格の項）の依存関係が交差しあっている状況です（文は Shieber (1985) より）。\n非常に雑にいうと、依存関係が交差しないネストした（入れ子構造になっている）関係だと文脈自由文法で表現できるのですが、連続交差依存は文脈自由文法では表現できません。 余談ですが、私は高校生のころ、英語を読むときに句や節ごとに括弧でかこんで読んでいました。いま考えてみると、これは私が英語を文脈自由文法で解析していたことになります。 もしSwiss-Germanを勉強することになっていたら、このような読み方はできなかったはずです。\ncross-serial dependenciesはそうあるわけではなく、上記の文と同じ意味を日本語で表そうとすると、以下のように、依存関係は交差せず、入れ子構造になります。 cross-serial dependencies自体は確かにレアな状況ですが、そのような状況が存在しないわけではないので、自然言語の文法を文脈自由文法で済ますのは不十分であるといえます。\nちなみに、同時期に Culy (1985) にて、Bambaraを用いて、形態的にも文脈自由文法で表現できない事例が存在することが示されています。\n2. 数多くの（独立に提案された）文法理論が、弱文脈依存文法である。 Joshi et al. (1975) によるTree Adjoining Grammar（TAG; 木接合文法）をはじめ、多くの文法理論が、特に80-90年代にかけて、計算・数理言語学の分野で提案されましたが、そのほとんどが最終的に文脈自由文法と文脈依存文法の間にいることが示されました。 これは、多くの計算・数理言語学者の間である種の「合意」がとれた状況とも言えるでしょう。\nこれについては、Stabler (2013) にてわかりやすくレビューされていますので、少々長いですが引用して提示しておきます。\nStabler (2013); p.4より In particular, a very significant computational consensus was identified by Joshi (1985) in his hypothesis that human languages are both strongly and weakly mildly context sensitive (MCS). While any empirical test of this hypothesis still depends on a network of theoretical assumptions, the claim is so fundamental that it can be connected to many diverse traditions in grammar. To say that language is \u0026#34;strongly and weakly\u0026#34; MCS is to say that MCS grammars can both define the sentences of human languages (weak adequacy) and also provide the structures of those languages (strong adequacy). Joshi’s original definition of MCS grammars was partly informal, so there are now various precise versions of his claim. One is that human languages are defined by tree adjoining grammars (TAGs) or closely related grammars, and another theoretically weaker (and hence empirically stronger) position is that human language are definable by the more expressive (set local) multi-component TAGs or closely related grammars. The most remarkable thing about this claim came out of the innocent-sounding phrase \u0026#34;or closely related grammars,\u0026#34; because it was discovered that a wide range of independently proposed grammar formalisms falls under that description. In particular, a series of papers beginning in the 1980’s and 1990’s established the following inclusion relations among the languages defined by various kinds of grammars, across traditions: CFG ⊂ CCG = TAG ⊂ MCTAG = ACG = MCFG = MG ⊂ CSG 上記引用にて、\nCFGはContext-Free Grammar（文脈自由文法） CCGはCombinatory Categorial Grammar（組合せ範疇文法; Ades and Steedman (1982); Steedman (1996)） TAGはTree Adjoining Grammar（木接合文法; Joshi et al. (1975)） MCTAGはMulti-Component Tree Adjoining Grammar（Joshi (1987)） ACGはAbstract Categorial Grammar（de Groote (2001)） MCFGはMultiple Context Free Grammar（多重文脈自由文法; Seki et al. (1991)） MCFGはLCFRS（Linear Context Free Rewriting System; Vijay-Shanker et al. (1987)）と同一という話だった気がするがちょっと詳しくないので覚えていないです。 MGはMinimalist Grammar（Stabler (1997); Stabler (2011)） CSGはContext Sensitive Grammar（文脈依存文法） を指します（定訳があるものは定訳を、また、その文法が提案されている代表的な論文情報を付与しています）。\nまた、このほかにも、\nLinear Indexed Grammar（LIG; Pollard (1984)） Head Grammar（HG; Gazdar (1985)） も、弱文脈依存文法の仲間であることが示されています (Vijay-Shanker and Weir, 1994)。\nただ、ここで面白いのは、弱文脈依存文法は一枚岩ではなく、上記の Stabler (2013) の引用の最後の関係式で表されているように、2つのクラスに分類できます。 具体的に、CCG, TAG, LIG, HGと、MCTAG, ACG, MCFG, LCFRS, MGです（MGにも複数の亜種があります）。\nいまは、それぞれのクラスにおいてそれぞれの優位性が主張されている段階で、これに関しての合意はまだとられていません。 たとえば、最近ではCCGサイドからは Stanojevic and Steedman (2020) が、MGサイドからは Frank and Hunter (2021) などが出ています（もっと色々出ていると思いますが）。\nもちろん、各文法理論内でも、「どのような操作を仮定するか」で揺れはあるので、上記の関係が必ずしも成り立つとは限りません。たとえばCCGは、slash-typingを導入することで（＝組合せ規則の適用に制限をかけることで）、TAGよりも弱生成力が低くなることも示されています (Kuhlmann et al., 2015)。\nまた、Head-driven Phrase Structure Grammar (HPSG; Pollard and Sag (1994)) やType Logical Grammar (TLG; 適切な引用がわからないのでSEPへ) のような、チューリング完全な文法理論もあります。\n弱文脈依存文法の心理的妥当性 上記のような議論ほど有名ではありませんが、最近では、計算心理言語学の分野においても、弱文脈依存文法 (MCSG) の文脈自由文法 (CFG) に対する優位性は主張されています。 たとえば、Brennan et al. (2016) や Li and Hale (2019) はMGとCFGを比較して、Stanojevic et al. (2023) はCCGとCFGを比較して、それぞれMCSGであるMG, CCGの方が、CFGよりも適切に、人が物語を聞いている間のBOLD信号（Blood Oxygen Level Dependent signals; 脳活動を反映した信号）を予測できることを示しました。\nもちろん、Hale et al. (2022) で指摘されているように、こうした結果は必ずしもMCSGが uniquely the right theory of human grammar (Hale et al., 2022; p.12) であるということを意味しているわけではありませんが、MCSGが、人間の文処理に関して、CFGでは説明できていないところを説明できているのは確かです。\nそもそもの用語説明：弱生成力と強生成力 ここまで特に断りなく使っていましたが、「生成力（generative capacity）」といったとき、「弱生成力 (weak generative capacity)」と「強生成力 (strong generative capacity)」という2 …","date":1711065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1711065600,"objectID":"c42c896211b81a916f0a7173338cc43f","permalink":"https://kohei-kaji.github.io/github-pages/post/240322mcsg/","publishdate":"2024-03-22T00:00:00Z","relpermalink":"/github-pages/post/240322mcsg/","section":"post","summary":"自然言語の文法が弱文脈依存文法 (Mildly Context-Sensitive Grammar) レベルなのでは？となるまでの歴史と、関連する議論について。","tags":null,"title":"弱文脈依存文法にまつわる理論言語学のはなし","type":"post"},{"authors":["梶川 康平","窪田 悠介","大関 洋平"],"categories":null,"content":"「統語変形」といった（言語を文脈自由以上にする）強力な統語操作がなぜ自然言語に存在するのか？という問いへの説明を目指すという目的意識は我ながら非常に面白いと思っていますし、今後もこの方向性で進もうと思っています。\nおそらく委員特別賞をいただけたのも、この目的意識が「面白い」と認識していただけたからだと思っており、この点が評価されたのは素直に嬉しく思います。\n一方で、手法に関してはよろしくないと考えています。特にここに関して学会の場でフィードバックをいただきたく言語処理学会に参加しました。\n結果として、多くの方から有益なコメント・アドバイスを頂けたので、大満足です。\n今後も言語処理学会に何かしらを出し続けようと強く思える会でした（来年以降の自分へ）。\n","date":1710288000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1710288000,"objectID":"bb7a86db461d6b604dbc1252a6fc630d","permalink":"https://kohei-kaji.github.io/github-pages/publication/kajikawa-etal-2024-nlp/","publishdate":"2024-03-17T06:07:27.373591Z","relpermalink":"/github-pages/publication/kajikawa-etal-2024-nlp/","section":"publication","summary":"自然言語には合成性にもとづく統語構造が存在し、さらに統語構造を直接変形する操作（統語変形）が存在する。先行研究において、合成性はコミュニケーションと学習可能性に関する圧力のトレードオフとして創発することが示されている。しかしながら、自然言語になぜ統語変形が存在するのかは明らかではない。本研究では、統語変形を必要とする統語現象として等位接続に注目した上で、統語変形もまたコミュニケーションと学習可能性に関する圧力のトレードオフとして創発するのかを検証する。","tags":[],"title":"統語変形はコミュニケーションから創発するのか？","type":"publication"},{"authors":["梶川 康平","窪田 悠介","大関 洋平"],"categories":null,"content":"","date":1705708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705708800,"objectID":"22d978018640e96a2f8359230f2a39e4","permalink":"https://kohei-kaji.github.io/github-pages/misc/%E8%A8%80%E8%AA%9E%E5%AD%A6%E3%83%95%E3%82%A7%E3%82%B9-2024/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/%E8%A8%80%E8%AA%9E%E5%AD%A6%E3%83%95%E3%82%A7%E3%82%B9-2024/","section":"misc","summary":"言語学フェス2024 / オンライン","tags":[],"title":"統語変換は文化進化から生じるのか？：等位接続構造での検討","type":"misc"},{"authors":["梶川 康平","窪田 悠介","大関 洋平"],"categories":null,"content":"","date":1705363200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705363200,"objectID":"e14b4cefc42318ad3baa5e9da9c111a7","permalink":"https://kohei-kaji.github.io/github-pages/misc/ninjalsalon-2024/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/ninjalsalon-2024/","section":"misc","summary":"第256回 NINJALサロン / 国立国語研究所 多目的室","tags":[],"title":"統語変換はコミュニケーションから創発するのか？","type":"misc"},{"authors":["中石 海","吉田 遼","梶川 康平","福島 孝治","大関 洋平"],"categories":null,"content":"","date":1701993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701993600,"objectID":"cd68461d47d069815e39ba3e281661bb","permalink":"https://kohei-kaji.github.io/github-pages/misc/mims-2023/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/mims-2023/","section":"misc","summary":"2023年度　MIMS 現象数理学研究拠点 共同研究集会「社会物理学とその周辺」","tags":[],"title":"自然言語の統語構造における相互情報量の解析と数理モデル化","type":"misc"},{"authors":["Kohei Kajikawa"],"categories":null,"content":"日本語のcleft（分裂文・断裂文）において、focus（焦点）位置に絶対にガ格名詞句を置くことができない（たとえば、　花子を呼んだのは太郎がだ　は非文。）が、他の格ならOK（花子が呼んだのは太郎をだ　はOK）、という事実を、CCGの統語論で解決することを提案した論文です。 具体的に、Kratzer (1996) によるconstructivistのアプローチを参考にした格付与のシステムをCCGで形式化しています。 これにより、日本語においてガ格だけが他の格と絶対的に異なる挙動をするという事実（ガ格名詞句は長距離かき混ぜできない、ガ格名詞句はsmall clause内におけない）も説明できることを示しています。\n","date":1700352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1700352000,"objectID":"c1c510799e1f13840b61118c153605ed","permalink":"https://kohei-kaji.github.io/github-pages/publication/kajikawa-2023-lenls/kajikawa-2023/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/publication/kajikawa-2023-lenls/kajikawa-2023/","section":"publication","summary":"In the Japanese cleft construction, multiple noun phrases (NPs) can occupy the focus position even if they do not form a `constituent` in the mainstream generative grammar. However, a single NP with the nominative case marker *ga* cannot. Kubota and Smith (2006, 2007) analyze the cleft construction with Combinatory Categorial Grammar (CCG, Steedman, 1996, 2000; Baldridge, 2002), but their analysis overgenerates a *ga*-marked NP in the focus position. Indeed, they recognized the obligatory omission of the nominative case marker in that position, and they assumed that some independently motivated principles should explain the distribution. However, it would be better if the distribution could be explained within the grammar formalism. This study aims to address this issue by partially incorporating the idea of *constructivist* analysis of argument structure from the mainstream generative grammar Kratzer (1996) into the CCG framework. Furthermore, I will show that this revision correctly predicts two syntactic phenomena where the *ga*-marked NP behaves differently from other case marked NPs.","tags":[],"title":"Analyzing Japanese Cleft Construction in Combinatory Categorial Grammar","type":"publication"},{"authors":null,"categories":null,"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Organize your notebooks Place the notebooks that you would like to publish in a notebooks folder at the root of your website.\nImport the notebooks into your site pipx install academic academic import \u0026#39;notebooks/**.ipynb\u0026#39; content/post/ --verbose The notebooks will be published to the folder you specify above. In this case, they will be published to your content/post/ folder.\n","date":1699056000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699056000,"objectID":"6fbb4df4c5956692c889271bb95715f4","permalink":"https://kohei-kaji.github.io/github-pages/post_default/blog-with-jupyter/","publishdate":"2023-11-04T00:00:00Z","relpermalink":"/github-pages/post_default/blog-with-jupyter/","section":"post_default","summary":"Easily blog from Jupyter notebooks!","tags":null,"title":"Blog with Jupyter Notebooks!","type":"post_default"},{"authors":["Shinnosuke Isono","Takuya Hasegawa","Kohei Kajikawa","Koichi Kono","Shiho Nakamura","Yohei Oseki"],"categories":null,"content":"主流生成文法の分散形態論 (Distributed Morphology, DM) を、CCGで形式化することを目指した研究です。\n","date":1698105600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1698105600,"objectID":"cb5dda7773b1d72d3220a381eef1ebc8","permalink":"https://kohei-kaji.github.io/github-pages/publication/isono-etal-2023-lncs/isono-etal-2023/","publishdate":"2024-01-11T06:06:03.254693Z","relpermalink":"/github-pages/publication/isono-etal-2023-lncs/isono-etal-2023/","section":"publication","summary":"We present a formalization of the constructivist analysis of argument structure in Combinatory Categorial Grammar (CCG). According to the constructivist analysis, often couched in terms of Distributed Morphology (DM), arguments are introduced in the syntax rather than specified by the lexical argument structure of the verb. We argue that formalizing constructivism in CCG not only provides the basis for a model of incremental processing of argument structure but also a principled account for the locality constraints on contextual allomorphy observed in the DM literature.","tags":[],"title":"Formalizing Argument Structures with Combinatory Categorial Grammar","type":"publication"},{"authors":["梶川 康平"],"categories":null,"content":" ","date":1680048000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680048000,"objectID":"8e7fe67ea15594b62bbc339281e748f9","permalink":"https://kohei-kaji.github.io/github-pages/misc/ewfl8-2023/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/ewfl8-2023/","section":"misc","summary":"Encouraging Workshop on Formal Linguistics 8 (EWFL8) / 東京大学 駒場キャンパス 18号館","tags":[],"title":"CCGによる日本語文処理のモデリング","type":"misc"},{"authors":["梶川 康平","吉田 遼","大関 洋平"],"categories":null,"content":"CCG（組合せ範疇文法）を使って、日本語の逐次的な文処理をモデリングした初の研究です。\n(i) ある地点 (文節) の読み時間を、その時点で作ることのできるCCGの二分木の数で予測可能なこと、(ii) parsing strategyとして英語で有効だと示されているReveal operation (Stanojevic et al., 2019; 2020; 2021) が、日本語では必ずしも妥当ではない、ということを主に主張したものです。\n卒論の内容だったので書けることを4ページに詰め込んだつもりだったが、そのためにわかりやすさを犠牲にしていたことがこの原稿の反省点です。\n","date":1678924800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678924800,"objectID":"365c954ec6b19c8c60788a8be20c5b79","permalink":"https://kohei-kaji.github.io/github-pages/publication/kajikawa-etal-2023-nlp/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/publication/kajikawa-etal-2023-nlp/","section":"publication","summary":"CCG（組合せ範疇文法）を使って、日本語の逐次的な文処理をモデリングした初の研究です。\n(i) ある地点 (文節) の読み時間を、その時点で作ることのできるCCGの二分木の数で予測可能なこと、(ii) parsing strategyとして英語で有効だと示されているReveal operation (Stanojevic et al., 2019; 2020; 2021) が、日本語では必ずしも妥当ではない、ということを主に主張したものです。\n卒論の内容だったので書けることを4ページに詰め込んだつもりだったが、そのためにわかりやすさを犠牲にしていたことがこの原稿の反省点です。","tags":[],"title":"CCGによる日本語文処理のモデリング","type":"publication"},{"authors":["磯野 真之介","梶川 康平","吉田 遼","大関 洋平"],"categories":null,"content":"Add the full text or supplementary notes for the publication here using Markdown formatting.\n","date":1678752000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678752000,"objectID":"bcdfb846076c065301443db8c373fbbb","permalink":"https://kohei-kaji.github.io/github-pages/publication/isono-etal-2023-nlp/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/publication/isono-etal-2023-nlp/","section":"publication","summary":"Add the full text or supplementary notes for the publication here using Markdown formatting.","tags":[],"title":"極小主義に動機づけられた統語的教示に基づく言語モデル","type":"publication"},{"authors":null,"categories":null,"content":"生成文法理論の1つであるCCG（組合せ範疇文法）を、私は文法理論としても、そして文処理のモデリングの道具としても非常に有用なものであると考えていますが、残念ながら（分野によっては）人口に膾炙しているとは言い難い状況ですので、CCGの広まりを願い、ここに文献リストや参照したら良いであろう情報を記します。\n文献案内 さらっと雰囲気を掴みたい場合 Jurafsky and Martin (to appear) NLPの教科書として有名なDan Jurafsky氏とJames Martin氏による Speech and Language Processing のDraftのAppendixの1つ。 最低限の組合せ規則と、CCGによるチャートパーザを簡潔に説明している。 言語学の方でも、前半だけ読むと、CCGにどういう操作があるのか・どういう構造を作るのか何となく掴みやすいと思う。 Steedman (2022) Mark Steedman氏による、割と網羅的なCCGの解説論文。 すでにCCGでのカテゴリ同士の組合せ方が何となくわかっていれば読みやすいと思う。 基本的には統語論に関する話。 Clark (2021) C\u0026amp;C parserのStephen Clark氏によるCCGのparsingに関する論文。 後半部分は当時最新のCCG parser作りに関する話だが、前半は、CCGの理論やCCGのparsingに関する解説として非常にわかりやすく学びが多い。 理論言語学関係 統語・意味の理論としてのCCGを理解したい場合に参照すべき文献たちです。 その他、CCGには音韻の理論としての顔もありますが、そのあたりは詳しくないので含めていません（Steedman (2000) にはそのあたりも載っています）。 Steedman (1996) CCG本の最初。 100ページ強と薄く、読みやすい。 CCGで、英語を網羅的に記述できることを示すべく書かれたもの。 Steedman (2000) Steedman (1996) の強化版。 若干の理論的改訂あり。 Google Scholarでは出版年が誤って2001となっており、ちらほら Steedman (2001) として論文中に登場してしまう。 Baldridge (2002) Jason Baldridge氏による博論。 slash typingを導入し、言語理論としてのCCGを大きく進化させた。 博論なので、解説としても有用。 戸次 (2010) 日本語CCG本。 日本語文法の論文としても面白い。 特に活用体系や、量化子周りの話。 書評 (矢田部, 2011) も面白い。 Steedman and Baldridge (2011) 非常にわかりやすく簡潔にまとまったCCGの解説論文。 そのため、Steedman (1996)や(2000)と並んでしばしば引用されている。 Non-Transformational Syntaxという本の1チャプター。 この本はほかの章も良い。Sag and Wasowの章が好き。 Steedman (2023) ほとんどミニマリストに向けて書いてあるLIの論文。 ミニマリストの理論を踏まえ、「CCGならもっと簡潔に書けますよ」と主張したもの。著者の穏健な姿勢が窺える。 ミニマリストがCCGをはじめる際には一番わかりやすいと思われる（自分がミニマリストではないのでわからないが）。 Steedman (to appear) Mark Steedman氏によるCCG本のドラフト。 新しいことが多く書いてあるが、完成するのだろうか、本当なのだろうか、という不安もある。 まあ、出版は楽しみ。 機械の文処理関係 ここでの機械の文処理とは、文を入力とし、確率的に計算した構文木を返してくれるNLP parser（構文解析器）等のことです。 Clark and Curran (2007) C\u0026amp;C parserとして有名。 いまだに現役だったりする。Supertaggerの評価用としてよく見る。 Hockenmaier and Steedman (2007) 英語CCGbank。 空白なし小文字b Penn Treebank (WSJ) からの自動変換。　Lewis and Steedman (2014) EasyCCG として有名。 深層学習 + A* search。 Uematsu et al. (2013) 日本語CCGBank。 空白なし大文字B 係り受けコーパスである京都大学テキストコーパス（毎日新聞）からの自動変換。 日本語CCGBankの続きとしては、以下のようなものがあります。 Kubota et al. (2020) による ABCTreebank The Keyaki Treebank からの自動変換 Tomita et al. (2024) ABCTreebank と lightblue による日本語CCGBankの再構築 Noji and Miyao (2016) 日本語CCG parserの Jigg。 Martinez-Gomez et al. (2016) 意味解析システムの ccg2lambda Bekki and Kawazoe (2016) 日本語CCG parserの lightblue Yoshikawa et al. (2017) 日本語CCG parserの depccg。 人間の文処理関係 Ades and Steedman (1982) 一番最初のCCG論文。 当初より逐次的な文処理を意図して作っていることが明確で良い。 Demberg (2012) CCGの逐次的な構造構築に関して、統語論・心理言語学の知見から述べられている。 Stanojevic et al. (2023) CCGによる、英語文処理（fMRIによるBOLD信号）のモデリング。 貢献は大きく分けて2つ。 CCGが、CFG（文脈自由文法）よりもより高い精度でBOLD信号を予測できることを示した。言語理論としてより妥当なCCGが、逐次的な文処理のモデル化の際にも優れていることを示した。 CCGの構造構築操作由来の予測子と、LLMで算出したSurprisalがBOLD信号の予測において別々に効いた。 Kajikawa et al. (2024) Isono (2024) 文を逐次的に理解する際に起こる、短期記憶に由来する処理負荷を、CCGの木構造ベースで説明したもの。 貢献・面白い点は、短期記憶由来の処理負荷は、今まで簡単な文脈自由文法（記述力は妥当ではない）や依存文法（単語間関係の記述は優れているが、逐次的に構造がどう構築されるかは不明瞭）でしかなかったが、それをCCG (記述力が妥当かつ、構造構築過程も明確) に発展させたこと。 個人的に、CCGの良さは、単に「competence grammarのままでprocessingのことをちゃんと語れそうな理論」、ということだけではなく、「いろいろなことができすぎない理論」だと思っています。具体的に、ここでは、構成素同士の合成にちゃんと制限があって、必ずしも何でも組合せられるわけではないが（つまり、単語が順に入ってきたとき、毎度毎度その単語をすでに作っている構成素に統合できるとは限らない）、この論文では、その組合せられないポイントを証拠に人間の文処理が説明できることが経験的に示されています。 生成力関係 Vijay-Shanker and Weir (1994) CCGの弱生成力が、Linear-Indexed Grammar (LIG), Head Grammar (HG), Tree-Adjoining Grammar (TAG) と等価であることを示した。 Kuhlmann et al. (2015) Vijay-Shanker and Weir (1994) のときに想定されていたCCGではなく、より新しいバージョンのCCGにて、TAGと弱生成力が等価であることを示した。 Schiffer and Maletti (2021) CCGの強生成力が、TAGと等価だと主張。 標準形関係 CCGでは、同じ意味を複数の異なる統語構造で表現することができます（spurious ambiguity; 擬似的曖昧性）。このおかげで、逐次的な合成による構造構築が可能なのですが、統語構造と意味の間に一対一対応が取れないことから、parserを作る上では問題になると考えられていました。 実際には、学習データのbranchingが一貫していれば、標準形の制約なしでも擬似的曖昧性の問題にはぶつからないようです (Yoshikawa et al. (2017), Yoshikawa et al. (2019) より)。 標準形の定義により、同じ意味を表す複数の異なる統語構造を1つに絞ることができます。 Eisner (1996) 証明に関する情報 Hoyt and Baldridge (2008) Hockenmaier and Bisk (2010) CCG parserを触ってみよう！ CCGは、他の文法理論に比べ、高精度なNLP parserが数おおく整備されている、という点で非常に有用です。 semantic parsingに適度に使いやすいといったことや、ツリーバンクの整備が早かった、という点が要因な気がしています。 特に、下記のparserたちは動かすのにそこまで難易度が高くないのでおすすめです。 そもそも構文解析器とはなんぞやという方へ 構文解析 自然言語処理の基礎 Speech and Language Processing (3rd ed. draft) 17章の Context-Free Grammars and Constituency Parsing や、18章の Dependency Parsing あたり。 depccg Pythonによる英日CCG parser。 Python@3.6以上、gcc@4.8以上が必要。 READMEが丁寧なので、基本そのまま従えば動かせる。 1点だけ、depccg_{en/ja} downloadコマンドはうまくいかないので、モデルの学習済みパラメータはリンク先のGoogle Driveから直接落としてこないといけない。 （追記：）最新のmacだとAllenNLPがローカルで動かせないという噂。Dockerで解決するしかない、という話を小耳に挟んだことがある。 lightblue Haskellによる日本語CCG parser。 Macユーザーなら、tidyは（おそらく）初めから入っているし、JUMAN++はHomebrew経由で入れられる。 残りはREADMEに従えば動かせる。 戸次 (2010)+アルファがそのまま実装されているので、語彙項目を参照するのに使い勝手が良い。 ccgtools Python, Cythonによる英中CCG parser。 高性能 (元State-of-the-Art)。 作成者であるMilos Stanojevic氏は、Scalaで Rotating-CCG というparserも作っている（論文は Stanojevic and Steedman, 2019）。 Google Colab上で動かせるようにしてくれているので、環境構築の必要がなく非常に便利。 CCGの導出木をLaTeXでかく ccg.sty Jason Baldridge氏によるスタイルファイル。 その他、CTL, 証明木用のスタイルファイルも公開してくれている。 使い方： ccg.styをTeXファイルと同じディレクトリにおき、以下のようにする： \\documentclass[10pt,a4paper]{article} \\usepackage{ccg} \\begin{document} \\deriv{3}{ \\text{Taro} \u0026amp; \\text{likes} …","date":1673481600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673481600,"objectID":"bf7ee1e9cc2208af72d568af0a295b38","permalink":"https://kohei-kaji.github.io/github-pages/post/230112ccg/","publishdate":"2023-01-12T00:00:00Z","relpermalink":"/github-pages/post/230112ccg/","section":"post","summary":"CCG（組合せ範疇文法）に関する雑多な文献案内・parser案内など。","tags":null,"title":"CCGに関する情報集","type":"post"},{"authors":["Shinnosuke Isono","Takuya Hasegawa","Kohei Kajikawa","Koichi Kono","Shiho Nakamura","Yohei Oseki"],"categories":null,"content":"主流生成文法の分散形態論 (Distributed Morphology, DM) を、CCGで形式化することを目指した研究です。\n初めて「論文を書く（＋発表する）」という作業に携わりました。\n数多くのことを学びました。感謝です。\n","date":1668816000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1668816000,"objectID":"313b6d3c31c832d20b9d40754d82e850","permalink":"https://kohei-kaji.github.io/github-pages/publication/isono-etal-2022-lenls/isono-etal-2022/","publishdate":"2024-01-11T06:07:50.120137Z","relpermalink":"/github-pages/publication/isono-etal-2022-lenls/isono-etal-2022/","section":"publication","summary":"主流生成文法の分散形態論 (Distributed Morphology, DM) を、CCGで形式化することを目指した研究です。\n初めて「論文を書く（＋発表する）」という作業に携わりました。\n数多くのことを学びました。感謝です。","tags":[],"title":"Formalizing argument structures with Combinatory Categorial Grammar","type":"publication"},{"authors":["Kohei Kajikawa","吳恩達"],"categories":["Demo","教程"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"9ed241aa87cc377130a6e2ac370135c0","permalink":"https://kohei-kaji.github.io/github-pages/post_default/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/github-pages/post_default/getting-started/","section":"post_default","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Hugo Blox Builder, the website builder for Hugo","type":"post_default"},{"authors":null,"categories":null,"content":"Hugo Blox Builder is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - blox-plugins-netlify - blox-plugins-netlify-cms - blox-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - blox-plugins-netlify - blox-plugins-netlify-cms - blox-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://docs.hugoblox.com/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/HugoBlox/hugo-blox-builder) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://docs.hugoblox.com/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/HugoBlox/hugo-blox-builder) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders as\ngantt section …","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"6778cb431171e39eca168c1d0dfe0ec8","permalink":"https://kohei-kaji.github.io/github-pages/post_default/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/github-pages/post_default/writing-technical-content/","section":"post_default","summary":"Hugo Blox Builder is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post_default"}]