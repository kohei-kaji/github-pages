
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Hi! I’m Kohei Kajikawa, a master student at the Department of Language and Information Sciences, Graduate School of Arts and Sciences, the University of Tokyo (Oseki lab). My research interests inlude computational linguistics, cognitive modeling, and Combinatory Categorial Grammar.\n研究に関して簡単に 文を見たり聞いたりするとすぐにその意味がわかりますが、その際に、脳内でどのような形の文法がどのようなアルゴリズムで使われているのかに興味があります。 また、その文法が、なぜいまある形になっているのかについても興味があります。\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Hi! I’m Kohei Kajikawa, a master student at the Department of Language and Information Sciences, Graduate School of Arts and Sciences, the University of Tokyo (Oseki lab). My research interests inlude computational linguistics, cognitive modeling, and Combinatory Categorial Grammar.","tags":null,"title":"Kohei Kajikawa","type":"authors"},{"authors":["梶川 康平","窪田 悠介","大関 洋平"],"categories":null,"content":"","date":1705708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705708800,"objectID":"22d978018640e96a2f8359230f2a39e4","permalink":"https://kohei-kaji.github.io/github-pages/misc/%E8%A8%80%E8%AA%9E%E5%AD%A6%E3%83%95%E3%82%A7%E3%82%B9-2024/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/%E8%A8%80%E8%AA%9E%E5%AD%A6%E3%83%95%E3%82%A7%E3%82%B9-2024/","section":"misc","summary":"言語学フェス2024 / オンライン","tags":[],"title":"統語変換は文化進化から生じるのか？：等位接続構造での検討","type":"misc"},{"authors":["梶川 康平","窪田 悠介","大関 洋平"],"categories":null,"content":"","date":1705363200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705363200,"objectID":"e14b4cefc42318ad3baa5e9da9c111a7","permalink":"https://kohei-kaji.github.io/github-pages/misc/ninjalsalon-2024/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/ninjalsalon-2024/","section":"misc","summary":"第256回 NINJALサロン / 国立国語研究所 多目的室","tags":[],"title":"統語変換はコミュニケーションから創発するのか？","type":"misc"},{"authors":["中石 海","吉田 遼","梶川 康平","福島 孝治","大関 洋平"],"categories":null,"content":"","date":1701993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701993600,"objectID":"cd68461d47d069815e39ba3e281661bb","permalink":"https://kohei-kaji.github.io/github-pages/misc/mims-2023/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/mims-2023/","section":"misc","summary":"2023年度　MIMS 現象数理学研究拠点 共同研究集会「社会物理学とその周辺」","tags":[],"title":"自然言語の統語構造における相互情報量の解析と数理モデル化","type":"misc"},{"authors":["Kohei Kajikawa"],"categories":null,"content":"日本語のcleft（分裂文・断裂文）において、focus（焦点）位置に絶対にガ格名詞句を置くことができない（たとえば、　花子を呼んだのは太郎がだ　は非文。）が、他の格ならOK（花子が呼んだのは太郎をだ　はOK）、という事実を、CCGの統語論で解決することを提案した論文です。 具体的に、Kratzer (1996) によるconstructivistのアプローチを参考にした格付与のシステムをCCGで形式化しています。 これにより、日本語においてガ格だけが他の格と絶対的に異なる挙動をするという事実（長距離かき混ぜ、small clause）も説明できることを示しています。\n","date":1700352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1700352000,"objectID":"c1c510799e1f13840b61118c153605ed","permalink":"https://kohei-kaji.github.io/github-pages/publication/kajikawa-2023-lenls/kajikawa-2023/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/publication/kajikawa-2023-lenls/kajikawa-2023/","section":"publication","summary":"In the Japanese cleft construction, multiple noun phrases (NPs) can occupy the focus position even if they do not form a `constituent` in the mainstream generative grammar. However, a single NP with the nominative case marker *ga* cannot. Kubota and Smith (2006, 2007) analyze the cleft construction with Combinatory Categorial Grammar (CCG, Steedman, 1996, 2000; Baldridge, 2002), but their analysis overgenerates a *ga*-marked NP in the focus position. Indeed, they recognized the obligatory omission of the nominative case marker in that position, and they assumed that some independently motivated principles should explain the distribution. However, it would be better if the distribution could be explained within the grammar formalism. This study aims to address this issue by partially incorporating the idea of *constructivist* analysis of argument structure from the mainstream generative grammar Kratzer (1996) into the CCG framework. Furthermore, I will show that this revision correctly predicts two syntactic phenomena where the *ga*-marked NP behaves differently from other case marked NPs.","tags":[],"title":"Analyzing Japanese Cleft Construction in Combinatory Categorial Grammar","type":"publication"},{"authors":null,"categories":null,"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Organize your notebooks Place the notebooks that you would like to publish in a notebooks folder at the root of your website.\nImport the notebooks into your site pipx install academic academic import \u0026#39;notebooks/**.ipynb\u0026#39; content/post/ --verbose The notebooks will be published to the folder you specify above. In this case, they will be published to your content/post/ folder.\n","date":1699056000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699056000,"objectID":"6fbb4df4c5956692c889271bb95715f4","permalink":"https://kohei-kaji.github.io/github-pages/post_default/blog-with-jupyter/","publishdate":"2023-11-04T00:00:00Z","relpermalink":"/github-pages/post_default/blog-with-jupyter/","section":"post_default","summary":"Easily blog from Jupyter notebooks!","tags":null,"title":"Blog with Jupyter Notebooks!","type":"post_default"},{"authors":["Shinnosuke Isono","Takuya Hasegawa","Kohei Kajikawa","Koichi Kono","Shiho Nakamura","Yohei Oseki"],"categories":null,"content":"主流生成文法の分散形態論 (Distributed Morphology, DM) を、CCGで形式化することを目指した研究です。\n","date":1698105600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1698105600,"objectID":"cb5dda7773b1d72d3220a381eef1ebc8","permalink":"https://kohei-kaji.github.io/github-pages/publication/isono-etal-2023-lncs/isono-etal-2023/","publishdate":"2024-01-11T06:06:03.254693Z","relpermalink":"/github-pages/publication/isono-etal-2023-lncs/isono-etal-2023/","section":"publication","summary":"We present a formalization of the constructivist analysis of argument structure in Combinatory Categorial Grammar (CCG). According to the constructivist analysis, often couched in terms of Distributed Morphology (DM), arguments are introduced in the syntax rather than specified by the lexical argument structure of the verb. We argue that formalizing constructivism in CCG not only provides the basis for a model of incremental processing of argument structure but also a principled account for the locality constraints on contextual allomorphy observed in the DM literature.","tags":[],"title":"Formalizing Argument Structures with Combinatory Categorial Grammar","type":"publication"},{"authors":["梶川 康平"],"categories":null,"content":" ","date":1680048000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680048000,"objectID":"8e7fe67ea15594b62bbc339281e748f9","permalink":"https://kohei-kaji.github.io/github-pages/misc/ewfl8-2023/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/misc/ewfl8-2023/","section":"misc","summary":"Encouraging Workshop on Formal Linguistics 8 (EWFL8) / 東京大学 駒場キャンパス 18号館","tags":[],"title":"CCGによる日本語文処理のモデリング","type":"misc"},{"authors":["梶川 康平","吉田 遼","大関 洋平"],"categories":null,"content":"CCG（組合せ範疇文法）を使って、日本語の逐次的な文処理をモデリングしたおそらく初の研究です。\n","date":1678924800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678924800,"objectID":"365c954ec6b19c8c60788a8be20c5b79","permalink":"https://kohei-kaji.github.io/github-pages/publication/kajikawa-etal-2023-nlp/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/publication/kajikawa-etal-2023-nlp/","section":"publication","summary":"CCG（組合せ範疇文法）を使って、日本語の逐次的な文処理をモデリングしたおそらく初の研究です。","tags":[],"title":"CCGによる日本語文処理のモデリング","type":"publication"},{"authors":["磯野 真之介","梶川 康平","吉田 遼","大関 洋平"],"categories":null,"content":"Add the full text or supplementary notes for the publication here using Markdown formatting.\n","date":1678752000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678752000,"objectID":"bcdfb846076c065301443db8c373fbbb","permalink":"https://kohei-kaji.github.io/github-pages/publication/isono-etal-2023-nlp/","publishdate":"2024-01-11T06:07:27.373591Z","relpermalink":"/github-pages/publication/isono-etal-2023-nlp/","section":"publication","summary":"Add the full text or supplementary notes for the publication here using Markdown formatting.","tags":[],"title":"極小主義に動機づけられた統語的教示に基づく言語モデル","type":"publication"},{"authors":null,"categories":null,"content":"生成文法理論の1つであるCCG（組合せ範疇文法）を、私は文法理論としても、そして文処理のモデリングの道具としても非常に有用なものであると考えていますが、残念ながら人口に膾炙しているとは言い難い理論ですので、CCGの広まりを願い、参照したら良いであろう情報を記します。\n文献案内 理論言語学関係 統語・意味の理論としてのCCGを理解したい場合に参照すべき文献たちです。 その他、CCGには音韻の理論としての顔もありますが、そのあたりは詳しくないので含まていません（Steedman (2000)にはそのあたりも載っています）。 Steedman (1996) CCG本の最初。 100ページ強と薄く、読みやすい。 1冊目として一番良さそう。 Steedman (2000) Steedman (1996) の強化版。 若干の理論的改訂あり。 Google Scholarでは出版年が誤って2001となっており、ちらほらSteedman (2001)として論文中に登場してしまう。 Baldridge (2002) Jason Baldridge氏による博論。 言語理論としてのCCGを大きく進化させた。 個人的には、Steedman (2000) よりわかりやすいと思う。 戸次 (2010) 日本語CCG本。 日本語文法の論文としても面白い。 書評 (矢田部, 2011)も面白い。 Steedman and Baldridge (2011) 非常にわかりやすく簡潔にまとまったCCGの解説論文。 そのため、Steedman (1996)や(2000)と並んでしばしば引用されている。 さくっとかつ網羅的に理解したい場合におすすめ。 Non-Transformational Syntaxという本の1チャプター。 この本はほかの章も良い。Sag and Wasowの章が好き。 Steedman (2023) ほとんどミニマリストに向けて書いてあるLIの論文。 ミニマリストがCCGをはじめる際には一番わかりやすいと思われる。 Parser関係 ここでのparserとは、文を入力とし、確率的に計算した構文木を返してくれるNLP parser（構文解析器）のことです。 Clark and Curran (2007) C\u0026amp;C parserとして有名。 （いまだに現役だったりする。Supertaggerの評価用としてよく見る。） Lewis and Steedman (2014) EasyCCGとして有名。 深層学習 + A* search。 Noji and Miyao (2016) 日本語CCG parserのJigg。 Yoshikawa et al. (2017) 日本語CCG parserのdepccg。 Hockenmaier and Steedman (2007) 英語CCGbank。 空白なし小文字b Penn Treebank (WSJ) からの自動変換。 Uematsu et al. (2013) 日本語CCGBank。 空白なし大文字B 係り受けコーパスである京都大学テキストコーパス（毎日新聞）からの自動変換。 （人間の）文処理関係 Ades and Steedman (1982) 一番最初のCCG論文。 当初より逐次的な文処理を意図して作っていることが明確で良い。 Demberg (2012) CCGの逐次的な構造構築に関して、統語論・心理言語学の知見から述べられている。 Stanojevic et al. (2023) CCGによる、英語文処理（fMRIによる血行動態）のモデリング。 貢献は大きく分けて2つ。 CCGが、CFG（文脈自由文法）よりもより高い精度で血行動態を予測できることを示した。言語理論としてより妥当なCCGが、逐次的な文処理のモデル化の際にも優れていることを示した。 CCGの構造構築操作由来の予測子と、LLMで算出したSurprisalが血行動態の予測において別々に効いた。 生成力関係 Vijay-Shanker and Weir (1994) 標準形関係 CCGでは、同じ意味を複数の異なる統語構造で表現することができます（spurious ambiguity）。このおかげで、逐次的な合成による構造構築が可能なのですが、統語構造と意味の間に一対一対応が取れないことから、parserを作る上では問題になると考えられていました。 標準形の定義により、同じ意味を表す複数の異なる統語構造を1つに絞ることができます。 Eisner (1996) 証明に関する情報 Hoyt and Baldridge (2008) Hockenmaier and Bisk (2010) その他有用な文献 Combinatory Categorial Grammar NLPの教科書として有名なDan Jurafsky氏とJames Martin氏によるSpeech and Language Processingの1チャプター。 文法規則とチャートパーザの挙動がちょっとわかるようになる。 Combinatory Categorial Grammar Mark Steedman氏による、割と網羅的なCCGの解説論文。 必ずしもわかりやすいわけではないので、最初に読むものとしては向いていない。 なんとなくわかってから読むとSteedman氏がどういったことがしたいのかわかる気がする。 Combinatory Categorial Grammar Mark Steedman氏によるCCG本のドラフト。 完成するのだろうか。 新しいことも多く書いてあり、出版が楽しみ。 Clark (2021) C\u0026amp;C parserのStephen Clark氏によるCCGのparsingに関する論文。 個人的には、CCGのparsingに関する解説として非常にわかりやすく学びが多い。 CCG parserを触ってみよう！ CCGは、他の文法理論に比べ、高精度なNLP parserが数おおく整備されている、という点で非常に有用です。 特に、下記のparserたちは動かすのにそこまで難易度が高くないのでおすすめです。 depccg Pythonによる英日CCG parser。 Python@3.6以上、gcc@4.8以上が必要。 READMEが丁寧なので、基本そのまま従えば動かせる。 1点だけ、depccg_{en/ja} downloadコマンドはうまくいかないので、モデルの学習済みパラメータはリンク先のGoogle Driveから直接落としてこないといけない。 lightblue Haskellによる日本語CCG parser。 Macユーザーなら、tidyは（おそらく）初めから入っているし、JUMAN++はHomebrew経由で入れられるので準備は非常に楽。他のOSではよくわかりません。 残りはREADMEに従えば動かせる。 戸次 (2010)+アルファがそのまま実装されているので、語彙項目を参照するのに使い勝手が良い。 ccgtools Python, Cythonによる英中CCG parser。 高性能 (元State-of-the-Art)。 作成者であるMilos Stanojevic氏は、ScalaでRotating-CCGというparserも作っている（論文はStanojevic and Steedman, 2019）。 Google Colab上で動かせるようにしてくれているので、環境構築の必要がなく非常に便利。 CCGの導出木をLaTeXでかく ccg.sty Jason Baldridge氏によるスタイルファイル。 その他、CTL, 照明木用のスタイルファイルも公開してくれている。 使い方： ccg.styをTeXファイルと同じディレクトリにおき、以下のようにする： \\documentclass[10pt,a4paper]{article} \\usepackage{ccg} \\begin{document} \\deriv{3}{ \\text{Taro} \u0026amp; \\text{likes} \u0026amp; \\text{Hanako} \\\\ \\uline{1} \u0026amp; \\uline{1} \u0026amp; \\uline{1} \\\\ \\mathit{NP} \u0026amp; \\mathit{S\\bs NP/NP} \u0026amp; \\mathit{NP} \\\\ \u0026amp; \\fapply{2} \\\\ \u0026amp; \\mc{2}{\\mathit{S\\bs NP}} \\\\ \\bapply{3} \\\\ \\mc{3}{\\mathit{S}} } \\end{document} 導出木のサイズを変えるのには、\\deriv{hoge}{fuga}の前にたとえば\\scriptsize\\deriv{hoge}{fuga}のようにする。 通常通り、linguexパッケージで文番号をつけるには、以下のようにする： \\ex.\\label{hoge-label} \\deriv{hoge}{fuga} ulemパッケージ（下線とか打ち消し線を挿入するもの）を入れると、\\uline{}が衝突してしまう。 ccg.styに\\newcommand{\\ulines}[1]{\\ul{#1}}などと追加して、\\deriv内では\\ul{}を使うようにすれば良い。 ccg-latex.sty Cem Bozsahin氏によるスタイルファイル。 上述のccg.styよりも充実していそうに思われる（少なくとも、READMEやexampleは充実している）。 個人的には、ccg.styで困っていないので使っていない。ので、存在しか知らない。 ","date":1673481600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673481600,"objectID":"195b40a6f0a95856a72149f85f390f1c","permalink":"https://kohei-kaji.github.io/github-pages/post/ccg/","publishdate":"2023-01-12T00:00:00Z","relpermalink":"/github-pages/post/ccg/","section":"post","summary":"CCG（組合せ範疇文法）に関する雑多な文献案内・parser案内など。","tags":null,"title":"CCGに関する情報集","type":"post"},{"authors":["Shinnosuke Isono","Takuya Hasegawa","Kohei Kajikawa","Koichi Kono","Shiho Nakamura","Yohei Oseki"],"categories":null,"content":"主流生成文法の分散形態論 (Distributed Morphology, DM) を、CCGで形式化することを目指した研究です。\n","date":1668816000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1668816000,"objectID":"313b6d3c31c832d20b9d40754d82e850","permalink":"https://kohei-kaji.github.io/github-pages/publication/isono-etal-2022-lenls/isono-etal-2022/","publishdate":"2024-01-11T06:07:50.120137Z","relpermalink":"/github-pages/publication/isono-etal-2022-lenls/isono-etal-2022/","section":"publication","summary":"主流生成文法の分散形態論 (Distributed Morphology, DM) を、CCGで形式化することを目指した研究です。","tags":[],"title":"Formalizing argument structures with Combinatory Categorial Grammar","type":"publication"},{"authors":["Kohei Kajikawa","吳恩達"],"categories":["Demo","教程"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"9ed241aa87cc377130a6e2ac370135c0","permalink":"https://kohei-kaji.github.io/github-pages/post_default/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/github-pages/post_default/getting-started/","section":"post_default","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Hugo Blox Builder, the website builder for Hugo","type":"post_default"},{"authors":null,"categories":null,"content":"Hugo Blox Builder is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - blox-plugins-netlify - blox-plugins-netlify-cms - blox-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - blox-plugins-netlify - blox-plugins-netlify-cms - blox-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://docs.hugoblox.com/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/HugoBlox/hugo-blox-builder) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://docs.hugoblox.com/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/HugoBlox/hugo-blox-builder) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders as\ngantt section …","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"6778cb431171e39eca168c1d0dfe0ec8","permalink":"https://kohei-kaji.github.io/github-pages/post_default/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/github-pages/post_default/writing-technical-content/","section":"post_default","summary":"Hugo Blox Builder is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post_default"}]